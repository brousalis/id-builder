{"version":3,"sources":["unknown"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;kBAEE,IAAI;;;;wBAEH,UAAU;;;;oBACH,MAAM;;sBACV,QAAQ;;;;sBACR,QAAQ;;;;8BAER,8BAA8B;;;;6BACpB,6BAA6B;;AAE1D,IAAM,cAAc,GAAG,uCAAuC,CAAC;AAC/D,IAAM,oBAAoB,GAAG,2CAA2C,CAAC;;AAEzE,QAAQ,CAAC,QAAQ,EAAE,YAAW;AAC5B,YAAU,CAAC,UAAU,EAAE,EAAE;AACvB,QAAI,CAAC,aAAa,GAAG,OAAO,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACnE,6BAAO,IAAI,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;GAChC,CAAC,CAAC;;AAEH,WAAS,CAAC,UAAU,EAAE,EAAE;AACtB,6BAAO,IAAI,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;GAChC,CAAC,CAAC;;AAEH,UAAQ,CAAC,iBAAiB,EAAE,YAAY;AACtC,MAAE,CAAC,mBAAmB,EAAE,UAAU,EAAE,EAAE;AACpC,wBAAO,4BAAO,eAAe,CAAC,CAC3B,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,QACb,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;AAExB,QAAE,EAAE,CAAC;KACN,CAAC,CAAC;GACJ,CAAC,CAAC;;AAEH,UAAQ,CAAC,iBAAiB,EAAE,YAAY;AACtC,MAAE,CAAC,mBAAmB,EAAE,UAAU,EAAE,EAAE;AACpC,wBAAO,4BAAO,eAAe,CAAC,CAC3B,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,QACb,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;AAExB,QAAE,EAAE,CAAC;KACN,CAAC,CAAC;GACJ,CAAC,CAAC;;AAEH,UAAQ,CAAC,uBAAuB,EAAE,YAAY;AAC5C,YAAQ,CAAC,2EAA2E,EAAE,YAAY;AAChG,cAAQ,CAAC,gDAAgD,EAAE,YAAY;AACrE,UAAE,CAAC,uBAAuB,EAAE,UAAS,EAAE,EAAE;AACvC,cAAM,OAAO,GAAG;AACd,+BAAmB,EAAE,GAAG;WACzB,CAAC;;AAEF,4BAAO,4BAAO,qBAAqB,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;;AAEzE,YAAE,EAAE,CAAC;SACN,CAAC,CAAC;OACJ,CAAC,CAAC;;AAEH,cAAQ,CAAC,wDAAwD,EAAE,YAAY;AAC7E,UAAE,CAAC,wBAAwB,EAAE,UAAS,EAAE,EAAE;AACxC,cAAM,OAAO,GAAG;AACd,+BAAmB,EAAE,GAAG;WACzB,CAAC;;AAEF,4BAAO,4BAAO,qBAAqB,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;;AAE/E,YAAE,EAAE,CAAC;SACN,CAAC,CAAC;OACJ,CAAC,CAAC;KACJ,CAAC,CAAC;;AAEH,YAAQ,CAAC,+EAA+E,EAAE,YAAY;AACpG,QAAE,CAAC,wBAAwB,EAAE,UAAS,EAAE,EAAE;AACxC,YAAM,OAAO,GAAG;AACd,6BAAmB,EAAE,GAAG;SACzB,CAAC;;AAEF,0BAAO,4BAAO,qBAAqB,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;;AAE1E,UAAE,EAAE,CAAC;OACN,CAAC,CAAC;KACJ,CAAC,CAAC;GACJ,CAAC,CAAC;;AAEH,UAAQ,CAAC,cAAc,EAAE,YAAW;AAClC,YAAQ,CAAC,kGAAkG,EAAE,YAAY;AACvH,QAAE,CAAC,6DAA6D,EAAE,UAAS,EAAE,EAAE;AAC7E,YAAM,OAAO,GAAG,EAAE,CAAC;AACnB,YAAM,KAAK,GAAG,cAAc,CAAC;AAC7B,YAAM,QAAQ,GAAG,oBAAoB,CAAC;;AAEtC,oCAAO,YAAY,CAAC,OAAO,EAAE,KAAK,EAAE,UAAS,CAAC,EAAE,MAAM,EAAE;AACtD,cAAI,CAAC,EAAE;AAAE,cAAE,CAAC,CAAC,CAAC,CAAC;WAAE;;AAEjB,4BAAO,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;;AAElC,YAAE,EAAE,CAAC;SACN,CAAC,CAAC;OACJ,CAAC,CAAC;KACJ,CAAC,CAAC;GACJ,CAAC,CAAC;;AAEH,UAAQ,CAAC,aAAa,EAAE,YAAW;AACjC,cAAU,CAAC,UAAU,EAAE,EAAE;;;AACvB,UAAI,CAAC,mBAAmB,GAAM,IAAI,CAAC,aAAa,SAAM,CAAC;AACvD,UAAI,CAAC,kBAAkB,GAAM,IAAI,CAAC,aAAa,WAAQ,CAAC;;AAExD,+BAAO,IAAI,CAAC,mBAAmB,EAAE,UAAA,CAAC,EAAI;AACpC,YAAI,CAAC,EAAE;AAAE,YAAE,CAAC,CAAC,CAAC,CAAC;SAAE;;AAEjB,iCAAO,MAAK,kBAAkB,EAAE,UAAA,CAAC,EAAI;AACnC,cAAI,CAAC,EAAE;AAAE,cAAE,CAAC,CAAC,CAAC,CAAC;WAAE;;AAEjB,YAAE,EAAE,CAAC;SACN,CAAC,CAAC;OACJ,CAAC,CAAC;KACJ,CAAC,CAAC;;AAEH,YAAQ,CAAC,kDAAkD,EAAE,YAAW;AACtE,QAAE,CAAC,gEAAgE,EAAE,UAAS,EAAE,EAAE;AAChF,YAAM,OAAO,GAAG,EAAE,CAAC;AACnB,YAAM,KAAK,GAAG,cAAc,CAAC;AAC7B,YAAM,QAAQ,GAAG,oBAAoB,CAAC;AACtC,YAAM,cAAc,GAAM,IAAI,CAAC,aAAa,mBAAgB,CAAC;AAC7D,YAAM,aAAa,GAAM,IAAI,CAAC,aAAa,oBAAiB,CAAC;;AAE7D,wBAAG,SAAS,CAAC,cAAc,EAAE,KAAK,EAAE,UAAA,CAAC,EAAI;AACvC,cAAI,CAAC,EAAE;AAAE,cAAE,CAAC,CAAC,CAAC,CAAC;WAAE;;AAEjB,sCAAO,WAAW,CAAC,OAAO,EAAE,cAAc,EAAE,aAAa,EAAE,UAAA,CAAC,EAAI;AAC9D,gBAAI,CAAC,EAAE;AAAE,gBAAE,CAAC,CAAC,CAAC,CAAC;aAAE;;AAEjB,4BAAG,QAAQ,CAAC,aAAa,EAAE,UAAC,CAAC,EAAE,UAAU,EAAK;AAC5C,kBAAI,CAAC,EAAE;AAAE,kBAAE,CAAC,CAAC,CAAC,CAAC;eAAE;;AAEjB,gCAAO,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;;AAEjD,gBAAE,EAAE,CAAC;aACN,CAAC,CAAC;WACJ,CAAC,CAAC;SACJ,CAAC,CAAC;OACJ,CAAC,CAAC;KACJ,CAAC,CAAC;GACJ,CAAC,CAAC;;AAEH,UAAQ,CAAC,iBAAiB,EAAE,YAAW;AACrC,cAAU,CAAC,UAAU,EAAE,EAAE;;;AACvB,UAAI,CAAC,mBAAmB,GAAM,IAAI,CAAC,aAAa,SAAM,CAAC;AACvD,UAAI,CAAC,kBAAkB,GAAM,IAAI,CAAC,aAAa,WAAQ,CAAC;;AAExD,+BAAO,IAAI,CAAC,mBAAmB,EAAE,UAAA,CAAC,EAAI;AACpC,YAAI,CAAC,EAAE;AAAE,YAAE,CAAC,CAAC,CAAC,CAAC;SAAE;;AAEjB,iCAAO,OAAK,kBAAkB,EAAE,UAAA,CAAC,EAAI;AACnC,cAAI,CAAC,EAAE;AAAE,cAAE,CAAC,CAAC,CAAC,CAAC;WAAE;;AAEjB,YAAE,EAAE,CAAC;SACN,CAAC,CAAC;OACJ,CAAC,CAAC;KACJ,CAAC,CAAC;;AAEH,YAAQ,CAAC,oDAAoD,EAAE,YAAW;AACxE,QAAE,CAAC,uEAAuE,EAAE,UAAS,EAAE,EAAE;AACvF,YAAM,OAAO,GAAG;AACd,6BAAmB,EAAE,IAAI,CAAC,mBAAmB;AAC7C,6BAAmB,EAAE,IAAI,CAAC,kBAAkB;SAC7C,CAAC;AACF,YAAM,KAAK,GAAG,cAAc,CAAC;AAC7B,YAAM,QAAQ,GAAG,oBAAoB,CAAC;AACtC,YAAM,iBAAiB,GAAM,IAAI,CAAC,aAAa,kBAAe,CAAC;AAC/D,YAAM,gBAAgB,GAAM,IAAI,CAAC,aAAa,mBAAgB,CAAC;AAC/D,YAAM,iBAAiB,GAAM,IAAI,CAAC,aAAa,kBAAe,CAAC;AAC/D,YAAM,gBAAgB,GAAM,IAAI,CAAC,aAAa,mBAAgB,CAAC;;AAE/D,wBAAG,SAAS,CAAC,iBAAiB,EAAE,KAAK,EAAE,UAAA,CAAC,EAAI;AAC1C,cAAI,CAAC,EAAE;AAAE,cAAE,CAAC,CAAC,CAAC,CAAC;WAAE;;AAGjB,0BAAG,SAAS,CAAC,iBAAiB,EAAE,KAAK,EAAE,UAAA,CAAC,EAAI;AAC1C,gBAAI,CAAC,EAAE;AAAE,gBAAE,CAAC,CAAC,CAAC,CAAC;aAAE;;AAEjB,wCAAO,eAAe,CAAC,OAAO,EAAE,UAAA,CAAC,EAAI;AACnC,kBAAI,CAAC,EAAE;AAAE,kBAAE,CAAC,CAAC,CAAC,CAAC;eAAE;;AAEjB,8BAAG,QAAQ,CAAC,gBAAgB,EAAE,UAAC,CAAC,EAAE,aAAa,EAAK;AAClD,oBAAI,CAAC,EAAE;AAAE,oBAAE,CAAC,CAAC,CAAC,CAAC;iBAAE;;AAEjB,gCAAG,QAAQ,CAAC,gBAAgB,EAAE,UAAC,CAAC,EAAE,aAAa,EAAK;AAClD,sBAAI,CAAC,EAAE;AAAE,sBAAE,CAAC,CAAC,CAAC,CAAC;mBAAE;;AAEjB,oCAAO,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;;AAEpD,oCAAO,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;;AAEpD,oBAAE,EAAE,CAAC;iBACN,CAAC,CAAC;eACJ,CAAC,CAAC;aACJ,CAAC,CAAC;WACJ,CAAC,CAAC;SACJ,CAAC,CAAC;OACJ,CAAC,CAAC;KACJ,CAAC,CAAC;GACJ,CAAC,CAAC;CACJ,CAAC,CAAC","file":"unknown","sourcesContent":["'use strict';\n\nimport fs from 'fs';\n\nimport log from 'loglevel';\nimport { expect } from 'chai';\nimport mkdirp from 'mkdirp';\nimport rimraf from 'rimraf';\n\nimport stylus from '../build/../../../lib/stylus';\nimport { randomString } from '../build/../../../lib/tests';\n\nconst functionSource = 'body\\n  h1\\n    background-color #000';\nconst functionOutputSource = 'body h1 {\\n  background-color: #000;\\n}\\n';\n\ndescribe('stylus', function() {\n  beforeEach(function (cb) {\n    this.directoryPath = '.tmp/' + Math.random().toString(36).slice(7);\n    mkdirp(this.directoryPath, cb);\n  });\n\n  afterEach(function (cb) {\n    rimraf(this.directoryPath, cb);\n  });\n\n  describe('sourceExtension', function () {\n    it('should be defined', function (cb) {\n      expect(stylus.sourceExtension)\n        .to.be.a('string')\n        .with.length.above(0);\n\n      cb();\n    });\n  });\n\n  describe('targetExtension', function () {\n    it('should be defined', function (cb) {\n      expect(stylus.targetExtension)\n        .to.be.a('string')\n        .with.length.above(0);\n\n      cb();\n    });\n  });\n\n  describe('sourceFilePathMatches', function () {\n    describe('when the `sourceFilePath` is located in the `options.sourceDirectoryPath`', function () {\n      describe('when the path ends in `stylus.sourceExtension`', function () {\n        it('should return `true`.', function(cb) {\n          const options = {\n            sourceDirectoryPath: 'x'\n          };\n\n          expect(stylus.sourceFilePathMatches(options, 'x/q.styl')).to.equal(true);\n\n          cb();\n        });\n      });\n\n      describe('when the path does not end in `stylus.sourceExtension`', function () {\n        it('should return `false`.', function(cb) {\n          const options = {\n            sourceDirectoryPath: 'x'\n          };\n\n          expect(stylus.sourceFilePathMatches(options, 'x/q.something')).to.equal(false);\n\n          cb();\n        });\n      });\n    });\n\n    describe('when the `sourceFilePath` is not located in the `options.sourceDirectoryPath`', function () {\n      it('should return `false`.', function(cb) {\n        const options = {\n          sourceDirectoryPath: 'x'\n        };\n\n        expect(stylus.sourceFilePathMatches(options, 'y/q.styl')).to.equal(false);\n\n        cb();\n      });\n    });\n  });\n\n  describe('compileChunk', function() {\n    describe('when the `options` is an object, the chunk is valid Stylus source and the callback is a function', function () {\n      it('should call the callback without an error and compiled code', function(cb) {\n        const options = {};\n        const chunk = functionSource;\n        const expected = functionOutputSource;\n\n        stylus.compileChunk(options, chunk, function(e, actual) {\n          if (e) { cb(e); }\n\n          expect(actual).to.equal(expected);\n\n          cb();\n        });\n      });\n    });\n  });\n\n  describe('compileFile', function() {\n    beforeEach(function (cb) {\n      this.sourceDirectoryPath = `${this.directoryPath}/src`;\n      this.buildDirectoryPath = `${this.directoryPath}/build`;\n\n      mkdirp(this.sourceDirectoryPath, e => {\n        if (e) { cb(e); }\n\n        mkdirp(this.buildDirectoryPath, e => {\n          if (e) { cb(e); }\n\n          cb();\n        });\n      });\n    });\n\n    describe('when compiling one source file with valid Stylus', function() {\n      it('should compile one build file that matches the expected output', function(cb) {\n        const options = {};\n        const chunk = functionSource;\n        const expected = functionOutputSource;\n        const sourceFilePath = `${this.directoryPath}/src/file.styl`;\n        const buildFilePath = `${this.directoryPath}/build/file.css`;\n\n        fs.writeFile(sourceFilePath, chunk, e => {\n          if (e) { cb(e); }\n\n          stylus.compileFile(options, sourceFilePath, buildFilePath, e => {\n            if (e) { cb(e); }\n\n            fs.readFile(buildFilePath, (e, fileBuffer) => {\n              if (e) { cb(e); }\n\n              expect(fileBuffer.toString()).to.equal(expected);\n\n              cb();\n            });\n          });\n        });\n      });\n    });\n  });\n\n  describe('compileAllFiles', function() {\n    beforeEach(function (cb) {\n      this.sourceDirectoryPath = `${this.directoryPath}/src`;\n      this.buildDirectoryPath = `${this.directoryPath}/build`;\n\n      mkdirp(this.sourceDirectoryPath, e => {\n        if (e) { cb(e); }\n\n        mkdirp(this.buildDirectoryPath, e => {\n          if (e) { cb(e); }\n\n          cb();\n        });\n      });\n    });\n\n    describe('when compiling many source files with valid Stylus', function() {\n      it('should compile all file to built files that match the expected output', function(cb) {\n        const options = {\n          sourceDirectoryPath: this.sourceDirectoryPath,\n          targetDirectoryPath: this.buildDirectoryPath\n        };\n        const chunk = functionSource;\n        const expected = functionOutputSource;\n        const sourceFilePathOne = `${this.directoryPath}/src/one.styl`;\n        const buildFilePathOne = `${this.directoryPath}/build/one.css`;\n        const sourceFilePathTwo = `${this.directoryPath}/src/two.styl`;\n        const buildFilePathTwo = `${this.directoryPath}/build/two.css`;\n\n        fs.writeFile(sourceFilePathOne, chunk, e => {\n          if (e) { cb(e); }\n\n\n          fs.writeFile(sourceFilePathTwo, chunk, e => {\n            if (e) { cb(e); }\n\n            stylus.compileAllFiles(options, e => {\n              if (e) { cb(e); }\n\n              fs.readFile(buildFilePathOne, (e, fileBufferOne) => {\n                if (e) { cb(e); }\n\n                fs.readFile(buildFilePathTwo, (e, fileBufferTwo) => {\n                  if (e) { cb(e); }\n\n                  expect(fileBufferOne.toString()).to.equal(expected);\n\n                  expect(fileBufferTwo.toString()).to.equal(expected);\n\n                  cb();\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});\n\n"]}
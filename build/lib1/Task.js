// Generated by LiveScript 1.3.1
var EventEmitter, Task, out$ = typeof exports != 'undefined' && exports || this;
EventEmitter = require("events").EventEmitter;
out$.Task = Task = (function(superclass){
  var prototype = extend$((import$(Task, superclass).displayName = 'Task', Task), superclass).prototype, constructor = Task;
  function Task(options){
    this.enabled = options.enabled || true;
    this.name = options.name || "";
    this.dependencies = options.dependencies || [];
  }
  prototype.run = function(cb){
    this.emit("done");
    return typeof cb == 'function' ? cb() : void 8;
  };
  return Task;
}(EventEmitter));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
{"version":3,"sources":["unknown"],"names":[],"mappings":";;;;;;;;wBAAgB,UAAU;;;;sBACZ,QAAQ;;;;qBACI,OAAO;;;;0BAGV,cAAc;;;;AAErC,IAAM,eAAe,GAAG,IAAI,CAAC;AAC7B,IAAM,eAAe,GAAG,IAAI,CAAC;;AAE7B,SAAS,qBAAqB,CAAC,OAAO,EAAE,cAAc,EAAE;AACtD,MAAM,SAAS,GAAG,oBAAE,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,UAAC,CAAC,EAAK;AAC9C,QAAM,UAAU,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;;AAEjC,WAAO,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;GAC1C,CAAC,CAAC;;AAEH,MAAI,SAAS,EAAE;AACb,WAAO,KAAK,CAAC;GACd;;AAED,MAAM,UAAU,GAAG,IAAI,MAAM,OAAK,OAAO,CAAC,mBAAmB,aAAQ,eAAe,OAAI,CAAC;;AAEzF,SAAO,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;CAC3C;;AAED,SAAS,YAAY,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,EAAE;AACxC,wBAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;;AAEpC,MAAI;AACF,QAAM,MAAM,GAAG,sBAAU,KAAK,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;;AAEjD,MAAE,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;GACvB,CAAC,OAAO,CAAC,EAAE;AACV,WAAO,EAAE,CAAC,CAAC,CAAC,CAAC;GACd;CACF;;AAED,SAAS,WAAW,CAAC,OAAO,EAAE,cAAc,EAAE,cAAc,EAAE,EAAE,EAAE;AAChE,wBAAI,KAAK,CAAC,uBAAuB,EAAE,cAAc,CAAC,CAAC;;AAEnD,0BAAW,WAAW,CAAC,YAAY,EAAE,OAAO,EAAE,cAAc,EAAE,cAAc,EAAE,EAAE,CAAC,CAAC;CACnF;;AAED,SAAS,eAAe,CAAC,OAAO,EAAE,EAAE,EAAE;AACpC,wBAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;;AAEvC,0BAAW,eAAe,CAAC,qBAAqB,EAAE,WAAW,EAAE,eAAe,EAAE,eAAe,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;CAC/G;;AAED,SAAS,+BAA+B,CAAC,OAAO,EAAE,EAAE,EAAE,EACrD;;qBAEc;AACb,iBAAe,EAAf,eAAe;AACf,iBAAe,EAAf,eAAe;AACf,uBAAqB,EAArB,qBAAqB;AACrB,cAAY,EAAZ,YAAY;AACZ,aAAW,EAAX,WAAW;AACX,iBAAe,EAAf,eAAe;AACf,iCAA+B,EAA/B,+BAA+B;CAChC","file":"unknown","sourcesContent":["import log from 'loglevel';\nimport _ from 'lodash';\nimport { transform } from 'babel';\n\n// import logging from './logging';\nimport fileSystem from './fileSystem';\n\nconst sourceExtension = 'js';\nconst targetExtension = 'js';\n\nfunction sourceFilePathMatches(options, sourceFilePath) {\n  const isIgnored = _.find(options.ignore, (v) => {\n    const expression = new RegExp(v);\n\n    return !!expression.exec(sourceFilePath);\n  });\n\n  if (isIgnored) {\n    return false;\n  }\n\n  const expression = new RegExp(`^${options.sourceDirectoryPath}.+\\\\.${sourceExtension}$`);\n\n  return !!sourceFilePath.match(expression);\n}\n\nfunction compileChunk(options, chunk, cb) {\n  log.debug('lib/babel.compileChunk');\n\n  try {\n    const output = transform(chunk, options.options);\n\n    cb(null, output.code);\n  } catch (e) {\n    return cb(e);\n  }\n}\n\nfunction compileFile(options, sourceFilePath, targetFilePath, cb) {\n  log.debug('lib/babel.compileFile', sourceFilePath);\n\n  fileSystem.compileFile(compileChunk, options, sourceFilePath, targetFilePath, cb);\n}\n\nfunction compileAllFiles(options, cb) {\n  log.debug('lib/babel.compileAllFiles');\n\n  fileSystem.compileAllFiles(sourceFilePathMatches, compileFile, sourceExtension, targetExtension, options, cb);\n}\n\nfunction compileAllPolymerComponentFiles(options, cb) {\n}\n\nexport default {\n  sourceExtension,\n  targetExtension,\n  sourceFilePathMatches,\n  compileChunk,\n  compileFile,\n  compileAllFiles,\n  compileAllPolymerComponentFiles\n};\n"]}
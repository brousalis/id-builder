// Generated by LiveScript 1.3.1
var async, chokidar, fs, idDebug, path, preludeLs, debug, info, warning, each, filter, map, watcher, getWatcher, start, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
async = require('async');
chokidar = require('chokidar');
fs = require('fs');
idDebug = require('id-debug');
path = require('path');
preludeLs = require('prelude-ls');
debug = idDebug.debug, info = idDebug.info, warning = idDebug.warning;
each = preludeLs.each, filter = preludeLs.filter, map = preludeLs.map;
watcher = void 8;
out$.getWatcher = getWatcher = function(){
  return watcher;
};
out$.start = start = function(options){
  var i$, ref$, len$, i;
  if (!options.paths.length) {
    return;
  }
  if (watcher) {
    return watcher;
  }
  watcher = chokidar.watch(options.paths[0], {
    ignored: /[\/\/]\./,
    persistent: true
  });
  for (i$ = 0, len$ = (ref$ = [1].concat(slice$.call(options.paths.length))).length; i$ < len$; ++i$) {
    i = ref$[i$];
    watcher.add(options.paths[i]);
  }
  return watcher;
};
{"version":3,"sources":["unknown"],"names":[],"mappings":";;;;;;;;wBAAgB,UAAU;;;;kBACH,IAAI;;oBACH,MAAM;;6BACR,eAAe;;uBAEjB,WAAW;;;;AAE/B,IAAM,WAAW,GAAG,mBAAW,SAAS,0CAAuC,CAAC;;AAEhF,SAAS,YAAY,GAAG;AACtB,SAAO,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;CAC5C;;AAED,SAAS,qBAAqB,CAAC,OAAO,EAAE,cAAc,EAAE;AACtD,MAAM,iBAAiB,GAAG,cAAc,IAAI,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AAC5E,MAAM,gBAAgB,GAAG,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;;AAElF,SAAO,iBAAiB,IAAI,gBAAgB,CAAC;CAC9C;;AAED,SAAS,oBAAoB,CAAC,OAAO,EAAE,aAAa,EAAE;AACpD,MAAM,iBAAiB,GAAG,aAAa,IAAI,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AAC1E,MAAM,gBAAgB,GAAG,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;;AAEjF,SAAO,iBAAiB,IAAI,gBAAgB,CAAC;CAC9C;;AAED,SAAS,QAAQ,CAAC,OAAO,EAAE,EAAE,EAAE;AAC7B,wBAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;;AAEhC,kBAAO,OAAO,CAAC,mBAAmB,EAAE,UAAA,MAAM,EAAI;AAC5C,QAAI,CAAC,MAAM,EAAE;AACX,2BAAQ,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,uBAAuB,GAAG,OAAO,CAAC,mBAAmB,GAAG,cAAc,CAAC,CAAC;AAC3G,aAAO,EAAE,EAAE,CAAC;KACb;;AAED,QAAM,YAAY,GAAG,0BAAM,MAAM,EAAE,CACjC,WAAW,EACX,aAAa,EACb,UAAU,EACV,YAAY,EACZ,OAAO,CAAC,QAAQ,EAChB,OAAO,CAAC,mBAAmB,CAC5B,CAAC,CAAC;;AAEH,gBAAY,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAA,KAAK,EAAI;AACtC,aAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;KACpC,CAAC,CAAC;;AAEH,gBAAY,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAA,KAAK,EAAI;AACtC,aAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;KACpC,CAAC,CAAC;;AAEH,gBAAY,CAAC,IAAI,CAAC,OAAO,EAAE,YAAM;AAC/B,QAAE,EAAE,CAAC;KACN,CAAC,CAAC;GACJ,CAAC,CAAC;CACJ;;qBAEc;AACb,cAAY,EAAZ,YAAY;AACZ,uBAAqB,EAArB,qBAAqB;AACrB,sBAAoB,EAApB,oBAAoB;AACpB,UAAQ,EAAR,QAAQ;CACT","file":"unknown","sourcesContent":["import log from 'loglevel';\nimport { exists } from 'fs';\nimport { resolve } from 'path';\nimport { spawn } from 'child_process';\n\nimport logging from './logging';\n\nconst pathToMocha = resolve(`${__dirname}/../../node_modules/mocha/bin/_mocha`);\n\nfunction randomString() {\n  return Math.random().toString(36).slice(7);\n}\n\nfunction sourceFilePathMatches(options, sourceFilePath) {\n  const matchesJavascript = sourceFilePath && !!sourceFilePath.match(/\\.js$/);\n  const matchesWatchPath = sourceFilePath.indexOf(options.watchDirectoryPath) === 0;\n\n  return matchesJavascript && matchesWatchPath;\n}\n\nfunction buildFilePathMatches(options, buildFilePath) {\n  const matchesJavascript = buildFilePath && !!buildFilePath.match(/\\.js$/);\n  const matchesWatchPath = buildFilePath.indexOf(options.watchDirectoryPath) === 0;\n\n  return matchesJavascript && matchesWatchPath;\n}\n\nfunction runTests(options, cb) {\n  log.debug('lib/tests.runTests');\n\n  exists(options.sourceDirectoryPath, exists => {\n    if (!exists) {\n      logging.taskInfo(options.taskName, 'Skipping: Directory `' + options.sourceDirectoryPath + '` not found.');\n      return cb();\n    }\n\n    const childProcess = spawn('node', [\n      pathToMocha,\n      '--recursive',\n      '--colors',\n      '--reporter',\n      options.reporter,\n      options.sourceDirectoryPath\n    ]);\n\n    childProcess.stdout.on('data', chunk => {\n      return process.stdout.write(chunk);\n    });\n\n    childProcess.stderr.on('data', chunk => {\n      return process.stderr.write(chunk);\n    });\n\n    childProcess.once('close', () => {\n      cb();\n    });\n  });\n}\n\nexport default {\n  randomString,\n  sourceFilePathMatches,\n  buildFilePathMatches,\n  runTests\n};\n"]}
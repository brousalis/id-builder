{"version":3,"sources":["unknown"],"names":[],"mappings":"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","file":"unknown","sourcesContent":["import { readFile, writeFile } from 'fs';\nimport { dirname } from 'path';\n\nimport _ from 'lodash';\nimport lsr from 'lsr';\nimport mkdirp from 'mkdirp';\nimport { each } from 'async';\n\nimport Compiler from './Compiler';\nimport Task from './Task';\nimport logging from '../lib/logging';\n\nclass CompileTask extends Task {\n  constructor(options = {}) {\n    super(options);\n\n    this.sourceFileExtension = options.sourceFileExtension;\n    this.targetFileExtension = options.targetFileExtension;\n    this.sourceDirectoryPath = options.sourceDirectoryPath;\n    this.targetDirectoryPath = options.targetDirectoryPath;\n\n    this.compiler = new Compiler();\n  }\n\n  get sourceFilePathMatchExpression() {\n    return new RegExp(`^${this.sourceDirectoryPath}.+\\\\.${this.sourceFileExtension}$`);\n  }\n\n  sourceFilePathMatches(sourceFilePath) {\n    return !!sourceFilePath.match(this.sourceFilePathMatchExpression);\n  }\n\n  get targetPathReplaceExpression() {\n    return new RegExp(`\\\\.${this.sourceFileExtension}$`);\n  }\n\n  getTargetPath(sourceFilePath) {\n    return sourceFilePath\n      .replace(this.sourceDirectoryPath, this.targetDirectoryPath)\n      .replace(this.targetPathReplaceExpression, `.${this.targetFileExtension}`);\n  }\n\n  getFiles(path, cb) {\n    lsr(path, (e, nodes) => {\n      if (e) {\n        return cb(e);\n      }\n\n      const filteredNodes = _.filter(nodes, v => {\n        if (v.isFile()) {\n          return v;\n        }\n      });\n\n      cb(null, filteredNodes);\n    });\n  }\n\n  ensureFileDirectory(targetFilePath, cb) {\n    mkdirp(dirname(targetFilePath), cb);\n  }\n\n  compileFile(sourceFilePath, targetFilePath, cb) {\n    readFile(sourceFilePath, (e, fileContent) => {\n      if (e) {\n        return cb(e);\n      }\n\n      this.compileChunk(fileContent.toString(), (e, compiledChunk) => {\n        if (e) {\n          logging.taskWarn(this.constructor.name, `${sourceFilePath}: ${e}`);\n          return cb();\n        }\n\n        this.ensureFileDirectory(targetFilePath, e => {\n          if (e) {\n            return cb(e);\n          }\n\n          writeFile(targetFilePath, compiledChunk, e => {\n            if (e) {\n              return cb(e);\n            }\n\n            logging.taskInfo(this.constructor.name, `${sourceFilePath} => ${targetFilePath}`);\n\n            cb(null);\n          });\n        });\n      });\n    });\n  }\n\n  compileAllFiles(cb) {\n    this.getFiles(this.sourceDirectoryPath, (e, sourceFilePaths) => {\n      if (e) {\n        return cb(e);\n      }\n\n      const paths = _(sourceFilePaths)\n        .map(v => v.fullPath)\n        .filter(this.sourceFilePathMatches.bind(this))\n        .value();\n\n      each(paths, (currentSourceFilePath, cb) => {\n        this.compileFile(currentSourceFilePath, this.getTargetPath(currentSourceFilePath), cb);\n      }, cb);\n    });\n  }\n}\n\nexport default CompileTask;\n"]}
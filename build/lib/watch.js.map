{"version":3,"sources":["unknown"],"names":[],"mappings":";;;;;;;;wBAAqB,UAAU;;;;wBACf,UAAU;;;;AAE1B,IAAI,OAAO,GAAG,IAAI,CAAC;;AAEnB,SAAS,UAAU,GAAG;AACpB,SAAO,OAAO,CAAC;CAChB;;AAED,SAAS,KAAK,CAAC,OAAO,EAAE;AACtB,wBAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;;;AAG7B,MAAI,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE;AACzB,WAAO,IAAI,CAAC;GACb;;;AAGD,MAAI,OAAO,EAAE;AACX,WAAO,OAAO,CAAC;GAChB;;AAED,wBAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;;;AAG/C,SAAO,GAAG,sBAAS,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE;AACtC,UAAM,EAAE,IAAI;AACZ,iBAAa,EAAE,IAAI;;AAEnB,cAAU,EAAE,IAAI;AAChB,cAAU,EAAE,IAAI;GACjB,CAAC,CAAC;;AAEH,wBAAI,KAAK,CAAC,iCAAiC,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;;AAE5D,SAAO,CAAC,EAAE,CAAC,KAAK,EAAE,UAAC,IAAI,EAAK;AAC1B,0BAAI,KAAK,CAAC,sBAAsB,EAAE,IAAI,CAAC,CAAC;GACzC,CAAC,CAAC;;AAEH,SAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,UAAC,IAAI,EAAK;AAC7B,0BAAI,KAAK,CAAC,yBAAyB,EAAE,IAAI,CAAC,CAAC;GAC5C,CAAC,CAAC;;AAEH,SAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,UAAC,IAAI,EAAK;AAC7B,0BAAI,KAAK,CAAC,yBAAyB,EAAE,IAAI,CAAC,CAAC;GAC5C,CAAC,CAAC;;AAEH,SAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,UAAC,IAAI,EAAK;AAC7B,0BAAI,KAAK,CAAC,yBAAyB,EAAE,IAAI,CAAC,CAAC;GAC5C,CAAC,CAAC;;AAEH,SAAO,CAAC,EAAE,CAAC,WAAW,EAAE,UAAC,IAAI,EAAK;AAChC,0BAAI,KAAK,CAAC,4BAA4B,EAAE,IAAI,CAAC,CAAC;GAC/C,CAAC,CAAC;;AAEH,SAAO,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,IAAI,EAAK;AAC5B,0BAAI,KAAK,CAAC,wBAAwB,EAAE,IAAI,CAAC,CAAC;GAC3C,CAAC,CAAC;;AAEH,SAAO,OAAO,CAAC;CAChB;;qBAEc;AACb,YAAU,EAAV,UAAU;AACV,OAAK,EAAL,KAAK;CACN","file":"unknown","sourcesContent":["import chokidar from 'chokidar';\nimport log from 'loglevel';\n\nlet watcher = null;\n\nfunction getWatcher() {\n  return watcher;\n}\n\nfunction start(options) {\n  log.debug('lib/watch.start');\n\n  // If there are no paths to watch, do nothing.\n  if (!options.paths.length) {\n    return null;\n  }\n\n  // If the watcher instance already exists, return it.\n  if (watcher) {\n    return watcher;\n  }\n\n  log.debug('lib/watch.start: creating watcher');\n\n  // Start the watcher with the first path.\n  watcher = chokidar.watch(options.paths, {\n    atomic: true,\n    ignoreInitial: true,\n    // ignored: /[\\/\\/]\\./,\n    persistent: true,\n    usePolling: true\n  });\n\n  log.debug('lib/watch.start: watching paths', options.paths);\n\n  watcher.on('add', (path) => {\n    log.debug('lib/watch.start: add', path);\n  });\n\n  watcher.on('addDir', (path) => {\n    log.debug('lib/watch.start: addDir', path);\n  });\n\n  watcher.on('change', (path) => {\n    log.debug('lib/watch.start: change', path);\n  });\n\n  watcher.on('unlink', (path) => {\n    log.debug('lib/watch.start: unlink', path);\n  });\n\n  watcher.on('unlinkDir', (path) => {\n    log.debug('lib/watch.start: unlinkDir', path);\n  });\n\n  watcher.on('error', (path) => {\n    log.debug('lib/watch.start: error', path);\n  });\n\n  return watcher;\n}\n\nexport default {\n  getWatcher,\n  start\n};\n"]}
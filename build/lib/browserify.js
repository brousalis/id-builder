// Generated by LiveScript 1.3.1
var async, browserify, fs, idDebug, path, debug, error, info, warning, fileSystem, logging, sourceExtension, targetExtension, sourceFilePathMatches, compileAllFiles, out$ = typeof exports != 'undefined' && exports || this;
async = require('async');
browserify = require('browserify');
fs = require('fs');
idDebug = require('id-debug');
path = require('path');
debug = idDebug.debug, error = idDebug.error, info = idDebug.info, warning = idDebug.warning;
fileSystem = require("./file-system");
logging = require("./logging");
out$.sourceExtension = sourceExtension = "coffee";
out$.targetExtension = targetExtension = "js";
out$.sourceFilePathMatches = sourceFilePathMatches = curry$(function(options, sourceFilePath){
  return options.sourcePath === sourceFilePath;
});
out$.compileAllFiles = compileAllFiles = function(options, cb){
  fs.exists(options.sourcePath, function(exists){
    if (!exists) {
      logging.taskInfo(options.taskName, "skipping `" + options.sourcePath + "` (Does not exist)");
      return cb();
    }
    fileSystem.ensureFileDirectory(options.targetPath, function(error){
      var bundle;
      if (error) {
        return cb(error);
      }
      bundle = browserify();
      bundle.add(path.resolve(options.sourcePath));
      bundle.on("bundle", function(bundleStream){
        var writeStream;
        writeStream = fs.createWriteStream(options.targetPath);
        writeStream.on("error", function(error){
          cb(error);
        });
        writeStream.on("finish", function(){
          logging.taskInfo(options.taskName, "`" + options.sourcePath + "` => `" + options.targetPath + "`");
          cb();
        });
        return bundleStream.pipe(writeStream);
      });
      bundle.bundle();
    });
  });
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
{"version":3,"sources":["unknown"],"names":[],"mappings":";;;;;;;;;;;;sBAAc,QAAQ;;;;qBACD,OAAO;;uBAER,WAAW;;;;IAEzB,OAAO;AACA,WADP,OAAO,GACe;QAAd,OAAO,yDAAG,EAAE;;0BADpB,OAAO;;AAET,QAAI,CAAC,OAAO,GAAG,OAAO,CAAC;;AAEvB,QAAI,CAAC,KAAK,GAAG,EAAE,CAAC;AAChB,QAAI,CAAC,aAAa,GAAG,EAAE,CAAC;AACxB,QAAI,CAAC,UAAU,GAAG,EAAE,CAAC;GACtB;;;;eAPG,OAAO;;WAUI,yBAAC,IAAI,EAAE;AACpB,aAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;KACjC;;;;;;WAImB,gCAAG;;;AACrB,0BAAE,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,UAAC,IAAI,EAAE,IAAI,EAAK;AACjC,YAAM,OAAO,GAAG,MAAK,eAAe,CAAC,IAAI,CAAC,CAAC;;AAE3C,YAAI,CAAC,OAAO,EAAE;AACZ,gBAAM,IAAI,KAAK,iCAA+B,IAAI,QAAK,CAAC;SACzD;;AAED,YAAI,CAAC,OAAO,CAAC,OAAO,EAAE;;AAEpB,gBAAK,aAAa,CAAC,IAAI,CAAC,GAAG;AACzB,wBAAY,EAAE,EAAE;WACjB,CAAC;SACH,MAAM;;AAEL,iBAAO,CAAC,OAAO,QAAO,CAAC;;AAEvB,gBAAK,aAAa,CAAC,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;SAC9C;OACF,CAAC,CAAC;KACJ;;;;;WAGgB,6BAAG;;;AAClB,0BAAE,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,UAAC,YAAY,EAAE,IAAI,EAAK;AACjD,eAAK,UAAU,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC,YAAY,CAAC,MAAM,CAAC,OAAK,mBAAmB,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC;OACxG,CAAC,CAAC;KACJ;;;WAEQ,mBAAC,EAAE,EAAE;;AAEZ,UAAI,CAAC,oBAAoB,EAAE,CAAC;;;AAG5B,UAAI,CAAC,iBAAiB,EAAE,CAAC;;AAEzB,uBAAK,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;KAC3B;;;WAEkB,6BAAC,IAAI,EAAE,IAAI,EAAE;;AAE9B,UAAI,CAAC,IAAI,CAAC,KAAK,EAAE;AACf,eAAO,UAAC,EAAE,EAAK;AACb,+BAAQ,QAAQ,CAAC,IAAI,CAAC,CAAC;AACvB,YAAE,EAAE,CAAC;SACN,CAAC;OACH;;AAED,aAAO,UAAC,EAAE,EAAK;AACb,6BAAQ,SAAS,CAAC,IAAI,CAAC,CAAC;;AAExB,YAAI,CAAC,KAAK,CAAC,UAAA,CAAC,EAAI;AACd,cAAI,CAAC,EAAE;AACL,mBAAO,EAAE,CAAC,CAAC,CAAC,CAAC;WACd;;AAED,+BAAQ,UAAU,CAAC,IAAI,CAAC,CAAC;;AAEzB,YAAE,EAAE,CAAC;SACN,CAAC,CAAC;OACJ,CAAC;KACH;;;;;WAGM,iBAAC,IAAI,EAAE;AACZ,UAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;KAC9B;;;WAEO,kBAAC,KAAK,EAAE;AACd,0BAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;KACxC;;;WAEI,eAAC,EAAE,EAAE;AACR,UAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;KACpB;;;SA1FG,OAAO;;;qBA6FE,OAAO","file":"unknown","sourcesContent":["import _ from 'lodash';\nimport { auto } from 'async';\n\nimport logging from './logging';\n\nclass Builder {\n  constructor(options = {}) {\n    this.options = options;\n\n    this.tasks = {};\n    this.taskInstances = {};\n    this.asyncTasks = {};\n  }\n\n  // Gets the options belonging to the task of `name`.\n  _getTaskOptions(name) {\n    return this.options.tasks[name];\n  }\n\n  // Instantiates all the tasks.\n  // TODO: Find a better way to do this.\n  _ensureTaskInstances() {\n    _.each(this.tasks, (Task, name) => {\n      const options = this._getTaskOptions(name);\n\n      if (!options) {\n        throw new Error(`No options found for task \"${name}\".`);\n      }\n\n      if (!options.enabled) {\n        // Fake a task that does nothing\n        this.taskInstances[name] = {\n          dependencies: []\n        };\n      } else {\n        // Pass the builder to the Task for scope.\n        options.builder = this;\n\n        this.taskInstances[name] = new Task(options);\n      }\n    });\n  }\n\n  // Converts Task to async.auto format until I find a better solution.\n  _ensureAsyncTasks() {\n    _.each(this.taskInstances, (taskInstance, name) => {\n      this.asyncTasks[name] = taskInstance.dependencies.concat(this._createTaskCallback(name, taskInstance));\n    });\n  }\n\n  _runTasks(cb) {\n    // First instantiate all tasks with their options.\n    this._ensureTaskInstances();\n\n    // Then ensure the async tree looks the same.\n    this._ensureAsyncTasks();\n\n    auto(this.asyncTasks, cb);\n  }\n\n  _createTaskCallback(name, task) {\n    // Make sure all callbacks get fired for dependencies wether they run or not.\n    if (!task.start) {\n      return (cb) => {\n        logging.skipTask(name);\n        cb();\n      };\n    }\n\n    return (cb) => {\n      logging.startTask(name);\n\n      task.start(e => {\n        if (e) {\n          return cb(e);\n        }\n\n        logging.finishTask(name);\n\n        cb();\n      });\n    };\n  }\n\n  // TODO: Actually convert all the tasks to Task classes.\n  addTask(task) {\n    this.tasks[task.name] = task;\n  }\n\n  addTasks(tasks) {\n    _.each(tasks, this.addTask.bind(this));\n  }\n\n  start(cb) {\n    this._runTasks(cb);\n  }\n}\n\nexport default Builder;\n"]}
// Generated by LiveScript 1.3.1
var fs, mkdirp, async, lsr, log, debug, info, warning, ref$, map, filter, browserify, coffeescript, fileSystem, jade, less, livescript, logging, stylus, sourceFilePathMatches, copyFile, copyAllFiles, out$ = typeof exports != 'undefined' && exports || this;
fs = require('fs');
mkdirp = require('mkdirp');
async = require('async');
lsr = require('lsr');
log = require("id-debug");
debug = log.debug, info = log.info, warning = log.warning;
ref$ = require("prelude-ls"), map = ref$.map, filter = ref$.filter;
browserify = require("./browserify");
coffeescript = require("./coffeescript");
fileSystem = require("./file-system");
jade = require("./jade");
less = require("./less");
livescript = require("./livescript");
logging = require("./logging");
stylus = require("./stylus");
out$.sourceFilePathMatches = sourceFilePathMatches = curry$(function(options, sourceFilePath){
  if (browserify.sourceFilePathMatches(options, sourceFilePath)) {
    return false;
  } else if (coffeescript.sourceFilePathMatches(options, sourceFilePath)) {
    return false;
  } else if (jade.sourceFilePathMatches(options, sourceFilePath)) {
    return false;
  } else if (less.sourceFilePathMatches(options, sourceFilePath)) {
    return false;
  } else if (livescript.sourceFilePathMatches(options, sourceFilePath)) {
    return false;
  } else if (stylus.sourceFilePathMatches(options, sourceFilePath)) {
    return false;
  } else if (!!sourceFilePath.match(RegExp('^' + options.sourcePath))) {
    return true;
  } else {
    return false;
  }
});
out$.copyFile = copyFile = curry$(function(options, sourceFilePath, targetFilePath, cb){
  fs.readFile(sourceFilePath, function(error, readChunk){
    if (error) {
      return cb(error);
    }
    fileSystem.ensureFileDirectory(targetFilePath, function(error){
      if (error) {
        return cb(error);
      }
      fs.writeFile(targetFilePath, readChunk, function(error){
        if (error) {
          return cb(error);
        }
        logging.taskInfo(options.taskName, "`" + sourceFilePath + "` => `" + targetFilePath + "`");
        cb(null);
      });
    });
  });
});
out$.copyAllFiles = copyAllFiles = curry$(function(options, cb){
  var this$ = this;
  lsr(options.sourcePath, function(error, nodes){
    var paths, iteratePath;
    if (error) {
      return cb(error);
    }
    paths = filter(sourceFilePathMatches(options))(
    map(function(it){
      return it.fullPath;
    })(
    filter(function(it){
      return !it.isDirectory();
    }, nodes)));
    iteratePath = function(currentSourceDirectoryPath, cb){
      var currentTargetDirectoryPath;
      currentTargetDirectoryPath = currentSourceDirectoryPath.replace(options.sourcePath, options.targetPath);
      copyFile(options, currentSourceDirectoryPath, currentTargetDirectoryPath, cb);
    };
    async.each(paths, iteratePath, function(error){
      if (error) {
        return cb(error);
      }
      cb(null);
    });
  });
});
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
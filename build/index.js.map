{"version":3,"sources":["unknown"],"names":[],"mappings":";;;;;;;;wBAAgB,UAAU;;;;0BAEN,eAAe;;;;iCACR,sBAAsB;;;;+BACxB,oBAAoB;;;;qBAE3B,SAAS;;;;qBAEZ,UAAS,YAAY,EAAO,EAAE,EAAE;MAAvB,YAAY,gBAAZ,YAAY,GAAG,EAAE;;AACvC,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,GAAG,kEAA6B,YAAY,CAAC,CAAC;;AAE5E,MAAI,OAAO,CAAC,OAAO,IAAI,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,KAAK,QAAQ,IAAI,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;AACpG,0BAAI,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;GACrC;;AAED,MAAM,OAAO,GAAG,4BAAY,OAAO,CAAC,CAAC;;AAErC,SAAO,CAAC,QAAQ,oBAAO,CAAC;;AAExB,SAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;CACnB","file":"unknown","sourcesContent":["import log from 'loglevel';\n\nimport Builder from './lib/Builder';\nimport defaultOptions from './lib/defaultOptions';\nimport parseOptions from './lib/parseOptions';\n\nimport tasks from './tasks';\n\nexport default function(inputOptions = {}, cb) {\n  const options = global.options = parseOptions(defaultOptions, inputOptions);\n\n  if (options.logging && typeof options.logging.level === 'string' && options.logging.level.length > 0) {\n    log.setLevel(options.logging.level);\n  }\n\n  const builder = new Builder(options);\n\n  builder.addTasks(tasks);\n\n  builder.start(cb);\n}\n"]}
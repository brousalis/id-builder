// Generated by LiveScript 1.3.1
var path, async, deepMerge, idType, preludeLs, each, objToPairs, lib, tasks, defaultSourceDirectory, defaultTargetDirectory, defaultOptions, parseOptions, builder;
path = require("path");
async = require("async");
deepMerge = require("deep-merge");
idType = require("id-type");
preludeLs = require("prelude-ls");
each = preludeLs.each;
objToPairs = preludeLs.Obj.objToPairs;
lib = require("./lib");
tasks = require("./tasks");
defaultSourceDirectory = "src";
defaultTargetDirectory = "build";
defaultOptions = {
  sourceDirectory: defaultSourceDirectory,
  targetDirectory: defaultTargetDirectory,
  tasks: {
    clean: {
      enabled: true,
      watch: true,
      path: ""
    },
    copy: {
      enabled: true,
      watch: true,
      sourcePath: "",
      targetPath: ""
    },
    compileBrowserify: {
      enabled: true,
      watch: true,
      sourcePath: "build/client/js/app.js",
      targetPath: "build/client/js/app.bundle.js"
    },
    compileCoffeescript: {
      enabled: true,
      watch: true,
      sourcePath: "",
      targetPath: ""
    },
    compileJade: {
      enabled: true,
      watch: true,
      sourcePath: "src/client",
      targetPath: "build/client"
    },
    compileLess: {
      enabled: true,
      watch: true,
      sourcePath: "",
      targetPath: ""
    },
    compileLivescript: {
      enabled: true,
      watch: true,
      sourcePath: "",
      targetPath: ""
    },
    compileStylus: {
      enabled: true,
      watch: true,
      sourcePath: "",
      targetPath: ""
    },
    documentation: {
      enabled: true,
      watch: true,
      sourcePath: "",
      targetPath: "docs"
    },
    runServers: {
      enabled: true,
      watch: true,
      paths: ["server/app.js"]
    },
    runTests: {
      enabled: true,
      watch: true
    },
    watch: {
      enabled: true,
      sourcePath: ""
    }
  }
};
parseOptions = function(defaults, options){};
builder = function(options, cb){
  var parsedOptions, clean, compileBrowserify, compileCoffeescript, compileJade, compileLess, compileLivescript, compileStylus, copy, documentation, runServers, runTests, watch, done;
  options == null && (options = {});
  parsedOptions = deepMerge()(defaultOptions, options);
  clean = function(cb){
    var task;
    console.log("> clean");
    if (!parsedOptions.tasks.clean.enabled) {
      return cb();
    }
    task = parsedOptions.tasks.clean;
    if (task.path === "") {
      task.path = parsedOptions.targetDirectory;
    }
    task.path = path.resolve(task.path);
    tasks.clean(parsedOptions, task, function(error){
      if (error) {
        return cb(error);
      }
      console.log("< clean");
      cb();
    });
  };
  compileBrowserify = function(cb){
    var task;
    console.log("> compile-browserify");
    task = parsedOptions.tasks.compileBrowserify;
    if (!task.enabled) {
      return cb();
    }
    if (task.sourcePath === "") {
      task.sourcePath = parsedOptions.sourceDirectory;
    }
    task.sourcePath = path.resolve(task.sourcePath);
    if (task.targetPath === "") {
      task.targetPath = parsedOptions.targetDirectory;
    }
    task.targetPath = path.resolve(task.targetPath);
    tasks.compileBrowserify.compileAllFiles(parsedOptions, task, function(error){
      if (error) {
        return cb(error);
      }
      console.log("< compile-browserify");
      cb();
    });
  };
  compileCoffeescript = function(cb){
    var task;
    console.log("> compile-coffeescript");
    task = parsedOptions.tasks.compileCoffeescript;
    if (!task.enabled) {
      return cb();
    }
    if (task.sourcePath === "") {
      task.sourcePath = parsedOptions.sourceDirectory;
    }
    task.sourcePath = path.resolve(task.sourcePath);
    if (task.targetPath === "") {
      task.targetPath = parsedOptions.targetDirectory;
    }
    task.targetPath = path.resolve(task.targetPath);
    tasks.compileCoffeescript.compileAllFiles(parsedOptions, task, function(error){
      if (error) {
        return cb(error);
      }
      console.log("< compile-coffeescript");
      cb();
    });
  };
  compileJade = function(cb){
    var task;
    console.log("> compile-jade");
    task = parsedOptions.tasks.compileJade;
    if (!task.enabled) {
      return cb();
    }
    if (task.sourcePath === "") {
      task.sourcePath = parsedOptions.sourceDirectory;
    }
    task.sourcePath = path.resolve(task.sourcePath);
    if (task.targetPath === "") {
      task.targetPath = parsedOptions.targetDirectory;
    }
    task.targetPath = path.resolve(task.targetPath);
    tasks.compileJade.compileAllFiles(parsedOptions, task, function(error){
      if (error) {
        return cb(error);
      }
      console.log("< compile-jade");
      cb();
    });
  };
  compileLess = function(cb){
    var task;
    console.log("> compile-less");
    task = parsedOptions.tasks.compileLess;
    if (!task.enabled) {
      return cb();
    }
    if (task.sourcePath === "") {
      task.sourcePath = parsedOptions.sourceDirectory;
    }
    task.sourcePath = path.resolve(task.sourcePath);
    if (task.targetPath === "") {
      task.targetPath = parsedOptions.targetDirectory;
    }
    task.targetPath = path.resolve(task.targetPath);
    tasks.compileLess.compileAllFiles(parsedOptions, task, function(error){
      if (error) {
        return cb(error);
      }
      console.log("< compile-less");
      cb();
    });
  };
  compileLivescript = function(cb){
    var task;
    console.log("> compile-livescript");
    task = parsedOptions.tasks.compileLivescript;
    if (!task.enabled) {
      return cb();
    }
    if (task.sourcePath === "") {
      task.sourcePath = parsedOptions.sourceDirectory;
    }
    task.sourcePath = path.resolve(task.sourcePath);
    if (task.targetPath === "") {
      task.targetPath = parsedOptions.targetDirectory;
    }
    task.targetPath = path.resolve(task.targetPath);
    tasks.compileLivescript.compileAllFiles(parsedOptions, task, function(error){
      if (error) {
        return cb(error);
      }
      console.log("< compile-livescript");
      cb();
    });
  };
  compileStylus = function(cb){
    var task;
    console.log("> compile-stylus");
    task = parsedOptions.tasks.compileStylus;
    if (!task.enabled) {
      return cb();
    }
    if (task.sourcePath === "") {
      task.sourcePath = parsedOptions.sourceDirectory;
    }
    task.sourcePath = path.resolve(task.sourcePath);
    if (task.targetPath === "") {
      task.targetPath = parsedOptions.targetDirectory;
    }
    task.targetPath = path.resolve(task.targetPath);
    tasks.compileStylus.compileAllFiles(parsedOptions, task, function(error){
      if (error) {
        return cb(error);
      }
      console.log("< compile-stylus");
      cb();
    });
  };
  copy = function(cb){
    var task;
    console.log("> copy");
    task = parsedOptions.tasks.copy;
    if (!task.enabled) {
      return cb();
    }
    if (task.sourcePath === "") {
      task.sourcePath = parsedOptions.sourceDirectory;
    }
    task.sourcePath = path.resolve(task.sourcePath);
    if (task.targetPath === "") {
      task.targetPath = parsedOptions.targetDirectory;
    }
    task.targetPath = path.resolve(task.targetPath);
    tasks.copy.copyAllFiles(parsedOptions, task, function(error){
      if (error) {
        return cb(error);
      }
      console.log("< copy");
      cb();
    });
  };
  documentation = function(cb){
    var task;
    console.log("> documentation");
    task = parsedOptions.tasks.documentation;
    if (!task.enabled) {
      return cb();
    }
    if (task.sourcePath === "") {
      task.sourcePath = parsedOptions.sourceDirectory;
    }
    task.sourcePath = path.resolve(task.sourcePath);
    if (task.targetPath === "") {
      task.targetPath = parsedOptions.targetDirectory;
    }
    task.targetPath = path.resolve(task.targetPath);
    console.log("< documentation");
    cb();
  };
  runServers = function(cb){
    console.log("> run-servers");
    console.log("< run-servers");
    cb();
  };
  runTests = function(cb){
    console.log("> run-tests");
    console.log("< run-tests");
    cb();
  };
  watch = function(cb){
    console.log("> watch");
    console.log("< watch");
    cb();
  };
  done = function(cb){
    console.log("> done");
    console.log("< done");
    cb();
  };
  return clean(function(error){
    if (error) {
      return cb(error);
    }
    compileCoffeescript(function(error){
      if (error) {
        return cb(error);
      }
      compileLivescript(function(error){
        if (error) {
          return cb(error);
        }
        compileJade(function(error){
          if (error) {
            return cb(error);
          }
          compileBrowserify(function(error){
            if (error) {
              return cb(error);
            }
            compileLess(function(error){
              if (error) {
                return cb(error);
              }
              compileStylus(function(error){
                if (error) {
                  return cb(error);
                }
                copy(function(error){
                  if (error) {
                    return cb(error);
                  }
                  documentation(function(error){
                    if (error) {
                      return cb(error);
                    }
                    runServers(function(error){
                      if (error) {
                        return cb(error);
                      }
                      runTests(function(error){
                        if (error) {
                          return cb(error);
                        }
                        done(function(error){
                          if (error) {
                            return cb(error);
                          }
                          cb();
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  });
};
module.exports = builder;
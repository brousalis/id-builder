// Generated by LiveScript 1.3.1
var fs, coffeeScript, lsr, async, log, debug, info, warning, ref$, map, filter, file, sourceExtension, targetExtension, sourceFilePathMatches, compileChunk, compileFile, compileAllFiles, out$ = typeof exports != 'undefined' && exports || this;
fs = require('fs');
coffeeScript = require('coffee-script');
lsr = require('lsr');
async = require('async');
log = require("id-debug");
debug = log.debug, info = log.info, warning = log.warning;
ref$ = require("prelude-ls"), map = ref$.map, filter = ref$.filter;
file = require("../lib/file");
out$.sourceExtension = sourceExtension = "coffee";
out$.targetExtension = targetExtension = "js";
out$.sourceFilePathMatches = sourceFilePathMatches = curry$(function(options, task, sourceFilePath){
  return sourceFilePath.match(RegExp('^' + options.tasks.compileCoffeescript.sourcePath + '.+\\.' + sourceExtension + '$'));
});
out$.compileChunk = compileChunk = function(options, task, chunk, cb){
  var error;
  try {
    cb(null, coffeeScript.compile(chunk));
  } catch (e$) {
    error = e$;
    return cb(error);
  }
};
out$.compileFile = compileFile = curry$(function(options, task, sourceFilePath, targetFilePath, cb){
  fs.readFile(sourceFilePath, function(error, chunk){
    if (error) {
      return cb(error);
    }
    compileChunk(options, task, chunk.toString(), function(error, compiledChunk){
      if (error) {
        return cb(error);
      }
      file.ensureFileDirectory(options, task, targetFilePath, function(error){
        if (error) {
          return cb(error);
        }
        fs.writeFile(targetFilePath, compiledChunk, function(error){
          if (error) {
            return cb(error);
          }
          info("| compile-coffeescript:compile-file `" + sourceFilePath + "` > `" + targetFilePath + "`.");
          cb(null);
        });
      });
    });
  });
});
out$.compileAllFiles = compileAllFiles = curry$(function(options, task, cb){
  var this$ = this;
  lsr(task.sourcePath, function(error, nodes){
    var paths, iteratePath;
    if (error) {
      return cb();
    }
    paths = filter(sourceFilePathMatches(options, task))(
    map(function(it){
      return it.fullPath;
    })(
    filter(function(it){
      return !it.isDirectory();
    }, nodes)));
    iteratePath = function(currentSourceFilePath, cb){
      var currentTargetFilePath;
      currentTargetFilePath = currentSourceFilePath.replace(task.sourcePath, task.targetPath).replace(RegExp('\\.' + sourceExtension + '$'), "." + targetExtension);
      compileFile(options, task, currentSourceFilePath, currentTargetFilePath, cb);
    };
    async.each(paths, iteratePath, function(error){
      if (error) {
        return cb(error);
      }
      cb(null);
    });
  });
});
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
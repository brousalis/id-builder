{"version":3,"sources":["unknown"],"names":[],"mappings":";;;;;;;;;;;;;;;;sCAA0B,4BAA4B;;;;8BAC9B,oBAAoB;;;;IAEtC,gBAAgB;YAAhB,gBAAgB;;AACT,WADP,gBAAgB,GACM;QAAd,OAAO,yDAAG,EAAE;;0BADpB,gBAAgB;;AAElB,+BAFE,gBAAgB,6CAEZ,OAAO,EAAE;;AAEf,QAAI,CAAC,QAAQ,GAAG,yCAAmB,CAAC;GACrC;;eALG,gBAAgB;;WAOR,sBAAC,KAAK,EAAE,EAAE,EAAE;AACtB,UAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,CAC9B,IAAI,CAAC,UAAC,MAAM,EAAK;AAChB,UAAE,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;OAClB,CAAC,SACI,CAAC,EAAE,CAAC,CAAC;KACd;;;WAEE,aAAC,EAAE,EAAE;AACN,UAAI,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;KAC1B;;;SAjBG,gBAAgB;;;qBAoBP,gBAAgB","file":"unknown","sourcesContent":["import BabelCompiler from '../compilers/BabelCompiler';\nimport CompileTask from '../lib/CompileTask';\n\nclass BabelCodeCompile extends CompileTask {\n  constructor(options = {}) {\n    super(options);\n\n    this.compiler = new BabelCompiler();\n  }\n\n  compileChunk(chunk, cb) {\n    this.compiler.compileChunk(chunk)\n      .then((result) => {\n        cb(null, result);\n      })\n      .catch(cb);\n  }\n\n  run(cb) {\n    this.compileAllFiles(cb);\n  }\n}\n\nexport default BabelCodeCompile;\n"]}
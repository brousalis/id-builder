{"version":3,"sources":["unknown"],"names":[],"mappings":";;;;;;;;;;;;;;;;kBAAuB,IAAI;;oBACJ,MAAM;;0BAET,gBAAgB;;;;8BACZ,oBAAoB;;;;IAEtC,WAAW;YAAX,WAAW;;AACJ,WADP,WAAW,GACW;QAAd,OAAO,yDAAG,EAAE;;0BADpB,WAAW;;AAEb,+BAFE,WAAW,6CAEP,OAAO,EAAE;;AAEf,QAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;AAC7C,QAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;GAC9C;;eANG,WAAW;;WAYH,sBAAC,KAAK,EAAE,EAAE,EAAE;AACtB,wBAAO,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,UAAC,CAAC,EAAE,MAAM,EAAK;AACjD,YAAI,CAAC,EAAE;AACL,iBAAO,EAAE,CAAC,CAAC,CAAC,CAAC;SACd;;AAED,eAAO,EAAE,CAAC,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;OAC7B,CAAC,CAAC;KACJ;;;WAEU,qBAAC,cAAc,EAAwB,cAAc,EAAwB,EAAE,EAAE;UAAhF,cAAc,gBAAd,cAAc,GAAG,IAAI,CAAC,cAAc;;;;UAAE,cAAc,gBAAd,cAAc,GAAG,IAAI,CAAC,cAAc;;AACpF,sBAAO,cAAc,EAAE,UAAC,SAAS,EAAK;AACpC,YAAI,SAAS,EAAE;AACb,qCAzBF,WAAW,+CAyBS,cAAc,EAAE,cAAc,EAAE,EAAE,EAAE;SACvD,MAAM;AACL,kCAAQ,QAAQ,CAAC,MAAK,WAAW,CAAC,IAAI,gBAAc,cAAc,uBAAoB,CAAC;AACvF,YAAE,EAAE,CAAC;SACN;OACF,CAAC,CAAC;KACJ;;;WAEE,aAAC,EAAE,EAAE;AACN,UAAI,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;KAChE;;;SA3BgC,eAAG;AAClC,aAAO,IAAI,MAAM,OAAK,IAAI,CAAC,cAAc,OAAI,CAAC;KAC/C;;;SAVG,WAAW;;;qBAsCF,WAAW","file":"unknown","sourcesContent":["import { exists } from 'fs';\nimport { render } from 'less';\n\nimport logging from '../lib/logging';\nimport CompileTask from '../lib/CompileTask';\n\nclass LessCompile extends CompileTask {\n  constructor(options = {}) {\n    super(options);\n\n    this.sourceFilePath = options.sourceFilePath;\n    this.targetFilePath = options.targetFilePath;\n  }\n\n  get sourceFilePathMatchExpression() {\n    return new RegExp(`^${this.sourceFilePath}$`);\n  }\n\n  compileChunk(chunk, cb) {\n    render(chunk, this.options.options, (e, result) => {\n      if (e) {\n        return cb(e);\n      }\n\n      return cb(null, result.css);\n    });\n  }\n\n  compileFile(sourceFilePath = this.sourceFilePath, targetFilePath = this.targetFilePath, cb) {\n    exists(sourceFilePath, (doesExist) => {\n      if (doesExist) {\n        super.compileFile(sourceFilePath, targetFilePath, cb);\n      } else {\n        logging.taskInfo(this.constructor.name, `skipping ${sourceFilePath} (Does not exist)`);\n        cb();\n      }\n    });\n  }\n\n  run(cb) {\n    this.compileFile(this.sourceFilePath, this.targetFilePath, cb);\n  }\n}\n\nexport default LessCompile;\n"]}
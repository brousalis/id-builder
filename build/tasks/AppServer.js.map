{"version":3,"sources":["unknown"],"names":[],"mappings":"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","file":"unknown","sourcesContent":["import { exists } from 'fs';\n\nimport { noop } from 'lodash';\nimport { Monitor } from 'forever-monitor';\nimport { each } from 'async';\n\nimport logging from '../lib/logging';\nimport Task from '../lib/Task';\n\nclass AppServer extends Task {\n  constructor(options = {}) {\n    super(options);\n\n    this.sourceDirectoryPath = options.sourceDirectoryPath;\n\n    this.monitors = {};\n  }\n\n  addPath(path, cb) {\n    const monitor = new Monitor(path, {\n      command: 'node'\n    });\n\n    this.monitors[path] = monitor;\n\n    monitor.start();\n\n    cb();\n  }\n\n  removePath(path, cb) {\n    const monitor = this.monitors[path];\n\n    monitor.kill(true);\n\n    delete this.monitors[path];\n\n    cb();\n  }\n\n  restartPath(path, cb) {\n    const monitor = this.monitors[path];\n\n    monitor.restart();\n\n    cb();\n  }\n\n  sourceFilePathMatches(sourceFilePath) {\n    return !!sourceFilePath.match(new RegExp(`^${this.sourceDirectoryPath}`));\n  }\n\n  startServer(filePath, cb) {\n    exists(filePath, result => {\n      if (!result) {\n        logging.taskInfo(this.constructor.name, `skipping ${filePath} (Does not exist).`);\n        return cb();\n      }\n\n      const monitor = this.monitors[filePath];\n\n      if (monitor) {\n        this.restartPath(filePath, cb);\n      } else {\n        this.addPath(filePath, cb);\n      }\n    });\n  }\n\n  stopServer(filePath, cb) {\n    exists(filePath, result => {\n      if (!result) {\n        logging.taskInfo(this.constructor.name, `skipping ${filePath} (Does not exist).`);\n        return cb();\n      }\n\n      const monitor = this.monitors[filePath];\n\n      if (monitor) {\n        this.removePath(filePath, cb);\n      } else {\n        logging.taskInfo(this.constructor.name, `skipping ${filePath} (Monitor does not exist).`);\n        cb();\n      }\n    });\n  }\n\n  restartServer(filePath, cb) {\n    exists(filePath, result => {\n      if (!result) {\n        logging.taskInfo(this.constructor.name, `skipping ${filePath} (Does not exist).`);\n        return cb();\n      }\n\n      this.removePath(filePath, e => {\n        if (e) {\n          return cb(e);\n        }\n\n        this.addPath(filePath, cb);\n      });\n    });\n  }\n\n  run() {\n    console.log('WHAT');\n\n    each(this.options.paths, (v, cb) => {\n      this.startServer(`${this.sourceDirectoryPath}/${v}`, cb);\n    }, noop);\n  }\n}\n\nexport default AppServer;\n"]}
// Generated by LiveScript 1.3.1
var fs, browserify, lsr, async, ref$, map, filter, file, sourceExtension, targetExtension, sourceFilePathMatches, compileFile, compileAllFiles, out$ = typeof exports != 'undefined' && exports || this;
fs = require('fs');
browserify = require('browserify');
lsr = require('lsr');
async = require('async');
ref$ = require("prelude-ls"), map = ref$.map, filter = ref$.filter;
file = require("../lib/file");
out$.sourceExtension = sourceExtension = "js";
out$.targetExtension = targetExtension = "js";
out$.sourceFilePathMatches = sourceFilePathMatches = curry$(function(options, task, sourceFilePath){
  return sourceFilePath === task.sourcePath;
});
out$.compileFile = compileFile = function(options, task, cb){
  fs.exists(task.sourcePath, function(exists){
    if (!exists) {
      console.log("| compile-browserify:skipping");
      return cb();
    }
    file.ensureFileDirectory(options, task, task.targetPath, function(error){
      var bundle;
      if (error) {
        return cb(error);
      }
      bundle = browserify();
      bundle.add(task.sourcePath);
      bundle.on("bundle", function(bundleStream){
        var writeStream;
        writeStream = fs.createWriteStream(task.targetPath);
        writeStream.on("error", function(error){
          console.log("error", error);
        });
        writeStream.on("finish", function(){
          console.log("| compile-browserify:compile-file `" + task.sourcePath + "` > `" + task.targetPath + "`.");
          cb();
        });
        return bundleStream.pipe(writeStream);
      });
      bundle.bundle();
    });
  });
};
out$.compileAllFiles = compileAllFiles = function(options, task, cb){
  compileFile(options, task, cb);
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
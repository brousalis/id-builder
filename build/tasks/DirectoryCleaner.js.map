{"version":3,"sources":["unknown"],"names":[],"mappings":";;;;;;;;;;;;;;;;wBAAgB,UAAU;;;;sBACP,QAAQ;;;;qBACN,OAAO;;uBAEX,aAAa;;;;IAExB,gBAAgB;YAAhB,gBAAgB;;AACT,WADP,gBAAgB,GACM;QAAd,OAAO,yDAAG,EAAE;;0BADpB,gBAAgB;;AAElB,+BAFE,gBAAgB,6CAEZ,OAAO,EAAE;;AAEf,QAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;GAC5B;;eALG,gBAAgB;;WAOG,iCAAC,IAAI,EAAE,EAAE,EAAE;AAChC,+BAAU,IAAI,YAAS,EAAE,CAAC,CAAC;KAC5B;;;WAEE,aAAC,EAAE,EAAE;AACN,uBAAK,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;KAC/D;;;SAbG,gBAAgB;;;qBAgBP,gBAAgB","file":"unknown","sourcesContent":["import log from 'loglevel';\nimport rimraf from 'rimraf';\nimport { each } from 'async';\n\nimport Task from '../lib/Task';\n\nclass DirectoryCleaner extends Task {\n  constructor(options = {}) {\n    super(options);\n\n    this.paths = options.paths;\n  }\n\n  removeDirectoryContents(path, cb) {\n    rimraf(`${path}/**/*`, cb);\n  }\n\n  run(cb) {\n    each(this.paths, this.removeDirectoryContents.bind(this), cb);\n  }\n}\n\nexport default DirectoryCleaner;\n"]}
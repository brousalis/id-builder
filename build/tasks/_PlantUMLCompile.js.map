{"version":3,"sources":["unknown"],"names":[],"mappings":";;;;;;;;;;;;;;;;kBAA0B,IAAI;;sBAEhB,QAAQ;;;;qBACD,OAAO;;qBACF,OAAO;;4BACR,eAAe;;;;8BAEhB,oBAAoB;;;;0BACxB,gBAAgB;;;;AAEpC,IAAI,IAAI,GAAG,IAAI,CAAC;;;;;;;;;;IASV,eAAe;YAAf,eAAe;;AACR,WADP,eAAe,GACO;QAAd,OAAO,yDAAG,EAAE;;0BADpB,eAAe;;AAEjB,+BAFE,eAAe,6CAEX,OAAO,EAAE;;;AAGf,QAAI,CAAC,OAAO,GAAG,EAAE,CAAC;GACnB;;;;;;;eANG,eAAe;;WAYX,kBAAC,IAAI,EAAE;AACb,UAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;KACzB;;;;;;;;WAMU,qBAAC,IAAI,EAAE;AAChB,aAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;KAC3B;;;;;;;;;WAOO,kBAAC,GAAG,EAAE;AACZ,aAAO,oBAAE,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE;AAC7B,aAAK,EAAE,OAAO;OACf,CAAC,CAAC;KACJ;;;;;;;;;WAOc,yBAAC,GAAG,EAAE;AACnB,aAAO,KAAK,CAAC;KACd;;;;;;;;WAMa,wBAAC,GAAG,EAAE,EACnB;;;;;;;;;WAOa,wBAAC,SAAS,EAAE,WAAW,EAAE,EACtC;;;;;;;;;WAOa,wBAAC,SAAS,EAAE,GAAG,EAAE;AAC7B,UAAI,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE;AAC7B,YAAM,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;;AAEjD,YAAI,CAAC,cAAc,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;OACjD;KACF;;;;;;;;;WAOc,yBAAC,SAAS,EAAE,GAAG,EAAE,EAC/B;;;;;;;;WAMW,sBAAC,GAAG,EAAE;AAChB,8BAAQ,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,oBAAkB,GAAG,CAAG,CAAC;;AAE/D,8BAAQ,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,yBAAuB,oBAAE,IAAI,CAAC,GAAG,CAAC,CAAG,CAAC;KAC7E;;;;;;;;;WAOM,iBAAC,cAAc,EAAE,KAAK,EAAE;AAC7B,UAAM,GAAG,GAAG,sBAAU,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC;;AAEvD,UAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;AACtB,YAAI,IAAI,EAAE;AACR,kCAAQ,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,2BAAyB,UAAS,UAAK,cAAc,CAAG,CAAC;AAC/F,kCAAQ,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,YAAU,0BAAa,SAAS,CAAC,GAAG,CAAC,CAAG,CAAC;;AAE/E,cAAM,UAAS,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;;AAEzC,cAAI,CAAC,QAAQ,CAAC,UAAS,CAAC,CAAC;;AAEzB,cAAI,CAAC,cAAc,CAAC,UAAS,EAAE,GAAG,CAAC,CAAC;AACpC,cAAI,CAAC,eAAe,CAAC,UAAS,EAAE,GAAG,CAAC,CAAC;AACrC,cAAI,GAAG,KAAK,CAAC;SACd;OACF;;AAED,YAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;KACxC;;;WAEW,sBAAC,cAAc,EAAE,KAAK,EAAE,EAAE,EAAE;AACtC,UAAI;AACF,UAAE,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC,CAAC;OAC/C,CAAC,OAAO,CAAC,EAAE;AACV,eAAO,EAAE,CAAC,CAAC,CAAC,CAAC;OACd;KACF;;;WAEU,qBAAC,cAAc,EAAE,EAAE,EAAE;;;AAC9B,8BAAQ,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,mBAAiB,cAAc,CAAG,CAAC;;AAEzE,wBAAS,cAAc,EAAE,UAAC,CAAC,EAAE,WAAW,EAAK;AAC3C,YAAI,CAAC,EAAE;AACL,iBAAO,EAAE,CAAC,CAAC,CAAC,CAAC;SACd;;AAED,cAAK,YAAY,CAAC,cAAc,EAAE,WAAW,CAAC,QAAQ,EAAE,EAAE,UAAC,CAAC,EAAE,aAAa,EAAK;AAC9E,cAAI,CAAC,EAAE;AACL,oCAAQ,QAAQ,CAAC,MAAK,WAAW,CAAC,IAAI,EAAK,cAAc,UAAK,CAAC,CAAG,CAAC;;AAEnE,mBAAO,EAAE,EAAE,CAAC;WACb;;AAED,YAAE,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;SACzB,CAAC,CAAC;OACJ,CAAC,CAAC;KACJ;;;WAEc,yBAAC,EAAE,EAAE;;;AAClB,UAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,mBAAmB,EAAE,UAAC,CAAC,EAAE,eAAe,EAAK;AAC9D,YAAI,CAAC,EAAE;AACL,iBAAO,EAAE,CAAC,CAAC,CAAC,CAAC;SACd;;AAED,YAAM,KAAK,GAAG,yBAAE,eAAe,CAAC,CAC7B,GAAG,CAAC,UAAA,CAAC;iBAAI,CAAC,CAAC,QAAQ;SAAA,CAAC,CACpB,MAAM,CAAC,OAAK,qBAAqB,CAAC,IAAI,QAAM,CAAC,CAC7C,KAAK,EAAE,CAAC;;AAEX,yBAAK,KAAK,EAAE,UAAC,qBAAqB,EAAE,EAAE,EAAK;AACzC,iBAAK,WAAW,CAAC,qBAAqB,EAAE,EAAE,CAAC,CAAC;SAC7C,EAAE,UAAC,CAAC,EAAE,OAAO,EAAK;AACjB,cAAI,CAAC,EAAE;AACL,mBAAO,EAAE,CAAC,CAAC,CAAC,CAAC;;AAEb,mBAAO,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;WACxC;SACF,CAAC,CAAC;OACJ,CAAC,CAAC;KACJ;;;WAEE,aAAC,EAAE,EAAE;AACN,UAAI,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;KAC1B;;;SAzKG,eAAe;;;qBA4KN,eAAe","file":"unknown","sourcesContent":["import  { readFile } from 'fs';\n\nimport _ from 'lodash';\nimport { each } from 'async'\nimport { transform } from 'babel';\nimport circularJSON from 'circular-json';\n\nimport CompileTask from '../lib/CompileTask';\nimport logging from '../lib/logging';\n\nlet DERP = true;\n\n/**\n * Constructs a PlantUML version of all classes fed to the compiler and puts\n * them into one diagram. Only supports a very specific subset of ES6\n * functionality;\n *  - Every module included in the graph contains one class.\n *  - Class names are unique (for now).\n */\nclass PlantUMLCompile extends CompileTask {\n  constructor(options = {}) {\n    super(options);\n\n    // Stores all classes to be used in the PlantUML output.\n    this.classes = {};\n  }\n\n  /**\n   * Adds a class to the classes.\n   * @param name\n   */\n  addClass(name) {\n    this.classes[name] = {};\n  }\n\n  /**\n   * Removes a class from the classes.\n   * @param name\n   */\n  removeClass(name) {\n    delete this.classes[name];\n  }\n\n  /**\n   * Returns true if the AST contains a class token, otherwise it returns false.\n   * @param {Object} ast\n   * @returns {Boolean}\n   */\n  hasClass(ast) {\n    return _.findWhere(ast.tokens, {\n      value: 'class'\n    });\n  }\n\n  /**\n   * Returns true if the class extends another, otherwise it returns false.\n   * @param ast\n   * @returns {boolean}\n   */\n  doesClassExtend(ast) {\n    return false;\n  }\n\n  /**\n   * Returns the name of the parent class.\n   * @param ast\n   */\n  getClassParent(ast) {\n  }\n\n  /**\n   * Adds the parent class as parent to this one.\n   * @param className\n   * @param classParent\n   */\n  addClassParent(className, classParent) {\n  }\n\n  /**\n   * Sets the parent of the class, if any.\n   * @param className\n   * @param ast\n   */\n  setClassParent(className, ast) {\n    if (this.doesClassExtend(ast)) {\n      const classExtendName = this.getClassParent(ast);\n\n      this.addClassParent(className, classExtendName);\n    }\n  }\n\n  /**\n   * Sets the methods of the class, if any.\n   * @param className\n   * @param ast\n   */\n  setClassMethods(className, ast) {\n  }\n\n  /**\n   * Returns the name of the class in the AST of a module.\n   * @param ast\n   */\n  getClassName(ast) {\n    logging.taskInfo(this.constructor.name, `getClassName ${ast}`);\n\n    logging.taskInfo(this.constructor.name, `getClassName keys ${_.keys(ast)}`);\n  }\n\n  /**\n   * Converts a chunk of ES6 code - containing a complete module - to a class.\n   * in-memory model inside the instance.\n   * @param chunk\n   */\n  convert(sourceFilePath, chunk) {\n    const ast = transform(chunk, this.options.options).ast;\n\n    if (this.hasClass(ast)) {\n      if (DERP) {\n        logging.taskInfo(this.constructor.name, `convert found class ${className}, ${sourceFilePath}`);\n        logging.taskInfo(this.constructor.name, `AST: ${circularJSON.stringify(ast)}`);\n\n        const className = this.getClassName(ast);\n\n        this.addClass(className);\n\n        this.setClassParent(className, ast);\n        this.setClassMethods(className, ast);\n        DERP = false;\n      }\n    }\n\n    throw new Error('Not yet implemented');\n  }\n\n  compileChunk(sourceFilePath, chunk, cb) {\n    try {\n      cb(null, this.convert(sourceFilePath, chunk));\n    } catch (e) {\n      return cb(e);\n    }\n  }\n\n  compileFile(sourceFilePath, cb) {\n    logging.taskInfo(this.constructor.name, `compileFile ${sourceFilePath}`);\n\n    readFile(sourceFilePath, (e, fileContent) => {\n      if (e) {\n        return cb(e);\n      }\n\n      this.compileChunk(sourceFilePath, fileContent.toString(), (e, compiledChunk) => {\n        if (e) {\n          logging.taskWarn(this.constructor.name, `${sourceFilePath}: ${e}`);\n\n          return cb();\n        }\n\n        cb(null, compiledChunk);\n      });\n    });\n  }\n\n  compileAllFiles(cb) {\n    this.getFiles(this.sourceDirectoryPath, (e, sourceFilePaths) => {\n      if (e) {\n        return cb(e);\n      }\n\n      const paths = _(sourceFilePaths)\n        .map(v => v.fullPath)\n        .filter(this.sourceFilePathMatches.bind(this))\n        .value();\n\n      each(paths, (currentSourceFilePath, cb) => {\n        this.compileFile(currentSourceFilePath, cb);\n      }, (e, results) => {\n        if (e) {\n          return cb(e);\n\n          console.log('results', results.length);\n        }\n      });\n    });\n  }\n\n  run(cb) {\n    this.compileAllFiles(cb);\n  }\n}\n\nexport default PlantUMLCompile;\n"]}
// Generated by LiveScript 1.3.1
var fs, mkdirp, async, lsr, log, debug, info, warning, ref$, map, filter, compileBrowserify, compileCoffeescript, compileJade, compileLess, compileLivescript, compileStylus, file, sourceFilePathMatches, copyFile, copyAllFiles, out$ = typeof exports != 'undefined' && exports || this;
fs = require('fs');
mkdirp = require('mkdirp');
async = require('async');
lsr = require('lsr');
log = require("id-debug");
debug = log.debug, info = log.info, warning = log.warning;
ref$ = require("prelude-ls"), map = ref$.map, filter = ref$.filter;
compileBrowserify = require("./compile-browserify");
compileCoffeescript = require("./compile-coffeescript");
compileJade = require("./compile-jade");
compileLess = require("./compile-less");
compileLivescript = require("./compile-livescript");
compileStylus = require("./compile-stylus");
file = require("../lib/file");
out$.sourceFilePathMatches = sourceFilePathMatches = curry$(function(options, task, sourceFilePath){
  if (compileBrowserify.sourceFilePathMatches(options, task, sourceFilePath)) {
    return false;
  } else if (compileCoffeescript.sourceFilePathMatches(options, task, sourceFilePath)) {
    return false;
  } else if (compileJade.sourceFilePathMatches(options, task, sourceFilePath)) {
    return false;
  } else if (compileLess.sourceFilePathMatches(options, task, sourceFilePath)) {
    return false;
  } else if (compileLivescript.sourceFilePathMatches(options, task, sourceFilePath)) {
    return false;
  } else if (compileStylus.sourceFilePathMatches(options, task, sourceFilePath)) {
    return false;
  } else if (!!sourceFilePath.match(RegExp('^' + task.sourcePath))) {
    return true;
  } else {
    return false;
  }
});
out$.copyFile = copyFile = curry$(function(options, task, sourceFilePath, targetFilePath, cb){
  fs.readFile(sourceFilePath, function(error, readChunk){
    if (error) {
      return cb(error);
    }
    file.ensureFileDirectory(options, task, targetFilePath, function(error){
      if (error) {
        return cb(error);
      }
      fs.writeFile(targetFilePath, readChunk, function(error){
        if (error) {
          return cb(error);
        }
        info("| copy:copy-file `" + targetFilePath + "`.");
        cb(null);
      });
    });
  });
});
out$.copyAllFiles = copyAllFiles = curry$(function(options, task, cb){
  var this$ = this;
  lsr(task.sourcePath, function(error, nodes){
    var paths, iteratePath;
    if (error) {
      return cb(error);
    }
    paths = filter(sourceFilePathMatches(options, task))(
    map(function(it){
      return it.fullPath;
    })(
    filter(function(it){
      return !it.isDirectory();
    }, nodes)));
    iteratePath = function(currentSourceDirectoryPath, cb){
      var currentTargetDirectoryPath;
      currentTargetDirectoryPath = currentSourceDirectoryPath.replace(task.sourcePath, task.targetPath);
      copyFile(options, task, currentSourceDirectoryPath, currentTargetDirectoryPath, cb);
    };
    async.each(paths, iteratePath, function(error){
      if (error) {
        return cb(error);
      }
      cb(null);
    });
  });
});
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}